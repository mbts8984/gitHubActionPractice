name: Tulip
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      # - name: Get file and convert
      #   uses: fabasoad/data-format-converter-action@main
      #   id: yaml2json
      #   with:
      #     input: "variables-to-check.yaml"
      #     from: "yaml"
      #     to: "json"

      # - name: Print result
      #   run: echo "${{ steps.yaml2json.outputs.output }}"

      # - name: Get the file
      #   id: LOLNERD
      #   run: |
      #     echo ${{ steps.yaml2json.outputs.data }}
      #     echo "CONFIG=${{ steps.yaml2json.outputs.data }}" >> $GITHUB_ENV

      - name: convert file
        id: secondStanza
        run: |
          yq 'variables-to-check.yaml' -p=yaml -o=json > 'data-format-converter-action.json' 
          jq -c . 'data-format-converter-action.json' > 'anotherFile.json'
          # echo ::set-output name=version::$(cat anotherFile.json)
          echo "CONFIG=$(cat anotherFile.json)" >> $GITHUB_ENV

      # - name: call other action
      #   uses: mbts8984/gitHubActionPractice/.github/actions/data-production-action@stateLines
      #   id: secondStanza
      #   with:
      #     input: "variables-to-check.yaml"
      #     from: "yaml"
      #     to: "json"

      # - name: nice to have
      #   run: echo "${{ steps.LOLNERD.outputs.output }}"

      - name: Print result
        run: |
          echo "test $CONFIG"
          # cat 'anotherFile.json'

      - name: make comment
        uses: actions/github-script@v4
        with:
          script: |
            const diff_url = context.payload.pull_request.diff_url
            const files = await github.request(diff_url)
            const file = files.data
            let position = 0
            let filePath = ''
            let arrayOfComments = []

            for(const line of file.split("\n")){
              if (line.startsWith("@@ ")){
                position = 0
              }
              else if (line.startsWith("+")){
                if(line.includes("+++")){
                  let parts = line.split("b/")
                  filePath  = parts.pop();
                  console.log("FILEPATH", filePath)
                }
                const addedLine = line.slice(1);
                const matches = ${{ steps.yaml2json.outputs.data }}

                for(const match of matches.matches){
                  const commentText = match.comment ? match.comment : matches.defaults.comment;
                  if (matchesPattern(match.regex, addedLine)){
                    singleComment = {
                      path: filePath,
                      position: position,
                      body: (commentText + addedLine)
                    }
                    console.log('Position ', position)
                    arrayOfComments.push(singleComment)
                  }
                }

              }
              position += 1;
            }
            github.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_id: '${{ github.event.pull_request.head.sha }}',
                event: "COMMENT",
                comments: arrayOfComments,
            })
