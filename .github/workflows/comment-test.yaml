name: Tulip
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: get file
        uses: fabasoad/yaml-json-xml-converter-action@main
        id: yaml2json
        with:
          path: "variables-to-check.yaml"
          from: "yaml"
          to: "json"

      - name: Get the file
        run: |
          echo ${{ steps.yaml2json.outputs.data }}
          echo "CONFIG=${{ steps.yaml2json.outputs.data }}" >> $GITHUB_ENV

      - name: make comment
        uses: actions/github-script@v4
        with:
          script: |
            const matchesPattern = (pattern, text) => {
              const regex = new RegExp(pattern);
              return !!text.match(regex)
            }
            const diff_url = context.payload.pull_request.diff_url
            console.log("DIFF_URL ", diff_url)
            const files = await github.request(diff_url)
            console.log("FILES ", files)
            const file = files.data
            console.log("SINGLE_FILE ", file)
            let position = 0
            let filePath = ''
            let arrayOfComments = []

            for(const line of file.split("\n")){
              if (line.startsWith("@@ ")){
                position = 0
              }
              else if (line.startsWith("+")){
                if(line.includes("+++")){
                  let parts = line.split("b/")
                  filePath  = parts.pop();
                }
                const addedLine = line.slice(1);
                const matches = ${{ steps.yaml2json.outputs.data }}
                console.log("MATCHES ", matches)
                for(const match of matches.matches){
                  const commentText = match.comment ? match.comment : matches.defaults.comment;
                  if (matchesPattern(match.regex, addedLine)){
                    singleComment = {
                      path: filePath,
                      position: position,
                      body: (commentText + addedLine)
                    }
                    console.log('Position ', position)
                    arrayOfComments.push(singleComment)
                  }
                }

              }
              position += 1;
            }
            github.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_id: '${{ github.event.pull_request.head.sha }}',
                event: "COMMENT",
                comments: arrayOfComments,
            })
