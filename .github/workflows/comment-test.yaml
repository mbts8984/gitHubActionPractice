name: Tulip
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"
      # - name: Get file and convert
      #   uses: fabasoad/data-format-converter-action@main
      #   id: yaml2json
      #   with:
      #     input: "variables-to-check.yaml"
      #     from: "yaml"
      #     to: "json"

      # - name: Print result
      #   run: echo "${{ steps.yaml2json.outputs.output }}"

      - name: Get the file
        run: |
          echo ${{ steps.yaml2json.outputs.data }}
          echo "CONFIG=${{ steps.yaml2json.outputs.data }}" >> $GITHUB_ENV
          echo "OS  ${{ runner.os }}"
          echo "ARCH  ${{ runner.arch }}"

      - name: call other action
        uses: mbts8984/gitHubActionPractice/.github/actions/data-production-action@stateLines
        id: secondStanza
        with:
          input: "variables-to-check.yaml"
          from: "yaml"
          to: "json"

      - name: Print result
        run: echo "${{ steps.secondStanza.outputs.output }}"

      # - name: Download mikefarah/yq
      #   if: ${{ inputs.from != inputs.to && steps.info.outputs.YQ_INSTALLED == 'false' }}
      #   uses: robinraju/release-downloader@v1.7
      #   with:
      #     repository: mikefarah/yq
      #     latest: false
      #     tag: v${{ steps.info.outputs.YQ_VERSION }}
      #     fileName: ${{ steps.info.outputs.YQ_BINARY }}
      #     tarBall: false
      #     zipBall: false

      # - name: make comment!
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       const matchesPattern = (pattern, text) => {
      #         const regex = new RegExp(pattern);
      #         return !!text.match(regex)
      #       }
      #       const diff_url = context.payload.pull_request.diff_url
      #       const files = await github.request(diff_url)
      #       const file = files.data
      #       let position = 0
      #       let filePath = ''
      #       let arrayOfComments = []

      #       for(const line of file.split("\n")){
      #         if (line.startsWith("@@ ")){
      #           position = 0
      #         }
      #         else if (line.startsWith("+")){
      #           if(line.includes("+++")){
      #             let parts = line.split("b/")
      #             filePath  = parts.pop();
      #             console.log("FILEPATH", filePath)
      #           }
      #           const addedLine = line.slice(1);
      #           const matches = ${{ steps.yaml2json.outputs.data }}

      #           for(const match of matches.matches){
      #             const commentText = match.comment ? match.comment : matches.defaults.comment;
      #             if (matchesPattern(match.regex, addedLine)){
      #               singleComment = {
      #                 path: filePath,
      #                 position: position,
      #                 body: (commentText + addedLine)
      #               }
      #               console.log('Position ', position)
      #               arrayOfComments.push(singleComment)
      #             }
      #           }

      #         }
      #         position += 1;
      #       }
      #       github.pulls.createReview({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: context.issue.number,
      #           commit_id: '${{ github.event.pull_request.head.sha }}',
      #           event: "COMMENT",
      #           comments: arrayOfComments,
      #       })
